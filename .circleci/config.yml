version: 2.1

executors:
  node: 
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker: 
      - image: amazon/aws-cli


commands:
  run-nodejs-scan:
    description: Run generic nodejs source code and dependency scanning
    parameters:
      workingdir:
        default: "."
        type: string
    steps:
      - run:
          name: Update npm 
          working_directory: "<< parameters.workingdir >>"
          command: npm update
      - run:
          name: Scanning the source defined in workingdir against npm audit
          working_directory: "<< parameters.workingdir >>"
          command: npm audit fix --audit-level=critical --force

  run-nodejs-tests:
    description: Run generic nodejs source code testing
    parameters:
      workingdir:
        default: "."
        type: string
    steps:
      - run:
          name: Generic testing of the javascript source with jest defined in working_directory
          working_directory: "<< parameters.workingdir >>"
          command: npm run test --ci


  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks using CIRCE_WORKFLOW_ID.
    parameters:
      when:
        type: string
    steps:
     - run:
        name: Check existence of aws cli and install it
        command: sh scripts/check_aws.sh
        when: << parameters.when >>
     - run:
        name: Destroy backend
        command: aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
        when: << parameters.when >>
     - run:
        name: Destroy frontend
        command: |
          aws s3 rm s3://udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7} --recursive
          aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
        when: << parameters.when >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
                cd backend
                npm run migrations:revert
                cd ..
                cd frontend
                npm run migrations:revert
                cd ..
            fi

            
jobs:

  #######################
  #### C INTEGRATION ####
  #######################

  ###### BUILDING #######

  build-frontend:
    executor: node
    steps:
      - checkout
      - run:
          name: Install frontend dependencies
          working_directory: ./frontend
          command: npm install
      - run:
          name: Build front-end with npm run build
          working_directory: ./frontend
          command: npm run build
      - save_cache:
          paths: 
            - frontend/node_modules
          key: frontend-build-${CIRCLE_WORKFLOW_ID:0:6}

  build-backend:
    executor: node
    steps:
      - checkout
      - run:
          name: Install backend dependencies
          working_directory: ./backend
          command: npm install
      - run:
          name: Build Backend with npm run build
          working_directory: ./backend
          command: npm run build
      - save_cache:
          paths:
            - backend/node_modules
            - backend/dist
          key: backend-build-${CIRCLE_WORKFLOW_ID:0:7}

  
  ###### TESTING #######

  test-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-build-${CIRCLE_WORKFLOW_ID:0:6}
      - run-nodejs-tests:
          workingdir: "./frontend"

  test-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-build-${CIRCLE_WORKFLOW_ID:0:7}
      - run-nodejs-tests:
          workingdir: "./backend"
            
  scan-frontend:
    executor: node
    steps:      
      - checkout
      - restore_cache:
          keys:
            - frontend-build-${CIRCLE_WORKFLOW_ID:0:6}
      - run-nodejs-scan:
          workingdir: "./frontend"


  scan-backend:
    executor: node
    steps:      
      - checkout
      - restore_cache:
          keys:
            - backend-build-${CIRCLE_WORKFLOW_ID:0:7}
      - run-nodejs-scan:
          workingdir: "./backend"
      - save_cache:
          paths:
            - backend/node_modules
            - backend/dist
          key: backend-build-${CIRCLE_WORKFLOW_ID:0:7}




  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Prepare ansible inventory file
          command: |
            echo "[web]" > .circleci/ansible/inventory
      - run:
          name: Extract Back-End IP
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/backend_ip
      - run:
          name: Add back-end IP to inventory
          command: |
            cat .circleci/ansible/backend_ip >> .circleci/ansible/inventory
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/backend_ip
            - .circleci/ansible/inventory
      - destroy-environment:
          when: on_fail


  configure-infrastructure:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ab:72:a8:7d:c3:37:3b:5b:b0:4f:6b:58:bb:05:62:06"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: .circleci/ansible
          command: |
            apk add --update ansible
      - run:
          name: Check inventory file
          working_directory: .circleci
          command: |
            cat ansible/inventory
            cat ansible/backend_ip
      - run:
          name: Configure server
          working_directory: .circleci
          command: |
            ansible-playbook -i ansible/inventory ansible/configure-server.yml
      - destroy-environment:
          when: on_fail


  run-migrations:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys: 
            - backend-build-${CIRCLE_WORKFLOW_ID:0:7}
      #- run:
      #    name: get hostname or ip into environment variable
          
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            export TYPEORM_HOST=$(cat ../.circleci/ansible/backend_ip)
            npm run migrations > migration_status
      - run:
          name: Save migration results to workspace
          working_directory: ./backend
          command: |
            if grep -q "executed successfully" migration_status
            then
              echo "Migration was succesful"
              echo "true" > migration_result
            else
              echo "Migration failed"
              echo "false" > migration_result
            fi
      - run:
          name: Save migration status to memstash
          working_directory: ./backend
          command: |
            curl -H "Content-Type: text/plain" -H "token: 59b634f0-5d93-44a8-8147-ece659e04d52" --request PUT --data "$(migration_result)" https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          when: on_fail


  deploy-01-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Get backend url
          working_directory: .circleci
          command: |
            cat ansible/backend_ip >> BACKEND_IP 
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Install frontend dependencies
          working_directory: ./frontend
          command: npm install
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: npm run build
      - save_cache:
          paths: 
            - frontend/node_dist
          key: frontend-dist-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment:
          when: on_fail
       

  deploy-02-frontend:
    executor: aws
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend-dist-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Copy frontend build to s3 bucket
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy-environment:
          when: on_fail

                    
  deploy-backend:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ab:72:a8:7d:c3:37:3b:5b:b0:4f:6b:58:bb:05:62:06"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            pip install awscli
      - run:
          name: Deploy backend
          working_directory: .circleci/ansible/
          command: |
            ansible-playbook -i inventory deploy-backend.yml 
      - destroy-environment:
          when: on_fail


  smoke-test:
    executor: python
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
    executor: aws
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          context:
            - aws_vars
      # I would like to set here an condition to run destroy-environment on failing jobs but this seems not possible right now in a single workflow
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          context:
            - aws_vars
            - udacity_devops_project3
      - run-migrations:
          requires: [configure-infrastructure]
          context:
            - aws_vars
            - udacity_devops_project3
      - deploy-01-frontend:
          requires: [run-migrations]
          context:
            - aws_vars 
      - deploy-02-frontend:
          requires: [run-migrations, deploy-01-frontend]
          context:  
            - aws_vars
      - deploy-backend:
          requires: [run-migrations]
          context:
            - aws_vars 
      - smoke-test:
          requires: [deploy-backend, deploy-01-frontend, deploy-02-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
